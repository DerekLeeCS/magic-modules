<% autogen_exception -%>
/*
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

// this file is auto-generated with mmv1, any changes made here will be overwritten

import jetbrains.buildServer.configs.kotlin.BuildType
import jetbrains.buildServer.configs.kotlin.Project
import jetbrains.buildServer.configs.kotlin.AbsoluteId

const val providerName = "google<%= "-" + version unless version == 'ga' -%>"

// Google<%= version.capitalize unless version == 'ga' -%> returns an instance of Project,
// which has multiple build configurations defined within it.
// See https://teamcity.jetbrains.com/app/dsl-documentation/root/project/index.html
fun Google<%= version.capitalize unless version == 'ga' -%>(environment: String, manualVcsRoot: AbsoluteId, branchRef: String, configuration: ClientConfiguration) : Project {

    var packageList = packages2 + services2

    return Project{

        // Create build configs for each package defined in packages.kt
        var buildConfigs = buildConfigurationsForPackages(packages, providerName, environment, manualVcsRoot, branchRef, configuration)
        buildConfigs.forEach { buildConfiguration ->
            buildType(buildConfiguration)
        }
    }
}

fun buildConfigurationsForPackages(packages: Map<String, Map<String, String>>, providerName : String, environment: String, manualVcsRoot: AbsoluteId, branchRef: String, config: ClientConfiguration): List<BuildType> {
    val triggerConfig = NightlyTriggerConfiguration(environment, branchRef)
    var list = ArrayList<BuildType>()

    // Create build configurations for all packages, except sweeper
    packages.forEach { (packageName, info) ->
        if (packageName.toString() == "sweeper") { return@forEach } // Skip

        val path: String = info.getValue("path").toString()
        val name: String = info.getValue("name").toString()


        val pkg = packageDetails(packageName, name, providerName, environment)
        val buildConfig = pkg.buildConfiguration(path, manualVcsRoot, defaultParallelism, triggerConfig)

        buildConfig.params.ConfigureGoogleSpecificTestParameters(config)

        list.add(buildConfig)
    }

    // Create Pre-Sweeper & Post-Sweeper build configurations
    val sweeperPackage : Map<String, String> = packages.getValue("sweeper")
    val sweeperName : String = sweeper.getValue("name")!!.toString()
    val sweeperPath : String = sweeper.getValue("path")!!.toString()
    val s = sweeperBuildConfigs(sweeperName, environment, branchRef, config)

    // Pre
    val preSweeperConfig = s.preSweeperBuildConfig(sweeperPath, manualVcsRoot, defaultParallelism, triggerConfig)
    preSweeperConfig.params.ConfigureGoogleSpecificTestParameters(config)

    list.add(preSweeperConfig)

    // Post
    val postSweeperConfig = s.postSweeperBuildConfig(sweeperPath, manualVcsRoot, defaultParallelism, triggerConfig)
    postSweeperConfig.params.ConfigureGoogleSpecificTestParameters(config)

    // Make Post-Sweeper dependent on all other build configuration finishing
    val allDependencyIds = ArrayList<String>()
    list.forEach { config ->
        allDependencyIds.add(config.id.toString())
    }
    postSweeperConfig.addDependencies(allDependencyIds)

    list.add(postSweeperConfig)

    return list
}

class NightlyTriggerConfiguration(environment: String, branchRef: String, nightlyTestsEnabled: Boolean = true, startHour: Int = defaultStartHour, daysOfWeek: String = defaultDaysOfWeek, daysOfMonth: String = defaultDaysOfMonth) {

    // Default values are used below unless
    // - alternatives passed in as arguments
    // - logic in `init` changes them based on environment
    var branchRef = branchRef
    var nightlyTestsEnabled = nightlyTestsEnabled
    var startHour = startHour
    var daysOfWeek = daysOfWeek
    var daysOfMonth = daysOfMonth

    init {
        // If the environment parameter is set to the value of MAJOR_RELEASE_TESTING, 
        // change the days of week to the day for v5.0.0 feature branch testing
        if (environment == MAJOR_RELEASE_TESTING) {
<% if version == 'ga' -%>
            this.daysOfWeek = "4" // Thursday for GA
<% elsif version == 'beta' -%>
            this.daysOfWeek = "5" // Friday for Beta
<% end -%>
        }
    }

}