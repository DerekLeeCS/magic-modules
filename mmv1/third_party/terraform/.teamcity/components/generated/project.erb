<% autogen_exception -%>
/*
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

// this file is auto-generated with mmv1, any changes made here will be overwritten

import jetbrains.buildServer.configs.kotlin.BuildType
import jetbrains.buildServer.configs.kotlin.Project
import jetbrains.buildServer.configs.kotlin.AbsoluteId

const val providerName = "google<%= "-" + version unless version == 'ga' -%>"

// Google<%= version.capitalize unless version == 'ga' -%> returns an instance of Project,
// which has multiple build configurations defined within it.
// See https://teamcity.jetbrains.com/app/dsl-documentation/root/project/index.html
fun Google<%= version.capitalize unless version == 'ga' -%>(environment: String, manualVcsRoot: AbsoluteId, branchRef: String, configuration: ClientConfiguration) : Project {
    return Project{

        // Create build configs for each package defined in packages.kt
        var buildConfigs = buildConfigurationsForPackages(packages, providerName, "google<%= "-" + version unless version == 'ga' -%>", environment, manualVcsRoot, branchRef, configuration)
        buildConfigs.forEach { buildConfiguration ->
            buildType(buildConfiguration)
        }
    }
}

fun buildConfigurationsForPackages(packages: Map<String, String>, providerName : String, path : String, environment: String, manualVcsRoot: AbsoluteId, branchRef: String, config: ClientConfiguration): List<BuildType> {
    var postSweeperConfig: BuildType? = null
    var triggerConfig = NightlyTriggerConfiguration(environment, branchRef)

    var list = ArrayList<BuildType>()

    // build configuration for the google(-beta) package, i.e. files directly inside ./google(-beta)
    // TODO(SarahFrench): refactor code so buildConfigurationsForPackages isn't called by buildConfigurationsForPackages
    // if below only necessary due to that problem
    if (!path.contains("services")){
        var rootPkg = packageDetails(providerName, providerName, providerName, environment)
        var rootBuildConfig = rootPkg.buildConfiguration(".", manualVcsRoot, defaultParallelism, triggerConfig)
        rootBuildConfig.params.ConfigureGoogleSpecificTestParameters(config)
        list.add(rootBuildConfig)
    }

    // build configurations for the tests in packages nested within ./google(-beta)
    packages.forEach { (packageName, displayName) ->
        if (packageName == "services") {
            // `services` is a folder containing packages, not a package itself; call buildConfigurationsForPackages to iterate through directories found within `services`
            var serviceList = buildConfigurationsForPackages(services, providerName, path+"/"+packageName, environment, manualVcsRoot, branchRef, config)
            list.addAll(serviceList)
        } else if (packageName == "sweeper") {
            // `sweepers` is the folder containing `resource.TestMain`, which allows sweeper tests to be invoked
            var s = sweeperBuildConfigs(packageName, environment, branchRef, config)

            // Pre-Sweeper
            var preSweeperConfig = s.preSweeperBuildConfig(path, manualVcsRoot, defaultParallelism, triggerConfig)
            preSweeperConfig.params.ConfigureGoogleSpecificTestParameters(config)
            list.add(preSweeperConfig)

            // Post-Sweeper - this is added to list later, after dependencies created dynamically below
            postSweeperConfig = s.postSweeperBuildConfig(path, manualVcsRoot, defaultParallelism, triggerConfig)
            postSweeperConfig.params.ConfigureGoogleSpecificTestParameters(config)
        } else {
            // other folders assumed to be packages
            var pkg = packageDetails(packageName, displayName, providerName, environment)
            var buildConfig = pkg.buildConfiguration(path, manualVcsRoot, defaultParallelism, triggerConfig)

            buildConfig.params.ConfigureGoogleSpecificTestParameters(config)

            list.add(buildConfig)
        }
    }

    // TODO(SarahFrench): refactor code so buildConfigurationsForPackages isn't called by buildConfigurationsForPackages
    if (postSweeperConfig != null) {
        // Make Post-Sweeper dependent on all other build configuration finishing
        var allDependencyIds = ArrayList<String>()
        list.forEach { config ->
            allDependencyIds.add(config.id.toString())
        }
        postSweeperConfig!!.addDependencies(allDependencyIds)
        list.add(postSweeperConfig!!)
    }

    return list
}

class NightlyTriggerConfiguration(environment: String, branchRef: String, nightlyTestsEnabled: Boolean = true, startHour: Int = defaultStartHour, daysOfWeek: String = defaultDaysOfWeek, daysOfMonth: String = defaultDaysOfMonth) {

    // Default values are used below unless
    // - alternatives passed in as arguments
    // - logic in `init` changes them based on environment
    var branchRef = branchRef
    var nightlyTestsEnabled = nightlyTestsEnabled
    var startHour = startHour
    var daysOfWeek = daysOfWeek
    var daysOfMonth = daysOfMonth

    init {
        // If the environment parameter is set to the value of MAJOR_RELEASE_TESTING, 
        // change the days of week to the day for v5.0.0 feature branch testing
        if (environment == MAJOR_RELEASE_TESTING) {
<% if version == 'ga' -%>
            this.daysOfWeek = "4" // Thursday for GA
<% elsif version == 'beta' -%>
            this.daysOfWeek = "5" // Friday for Beta
<% end -%>
        }
    }

}